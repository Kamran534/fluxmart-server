Outstanding Issues and Actions

- Ports & URLs
  - Port mismatch (scripts 8000 vs app/compose 8080) — DONE
    - Impact: Confusing DX; broken local runs
    - Action: Standardize to 8080 everywhere; fix docker:run and hardcoded URLs
    - Resolution: Updated package.json docker:run to -p 8080:8080; swagger logs now use PORT
  - Swagger logs hardcode 8080 — DONE
    - Impact: Incorrect links when PORT changes
    - Action: Use process.env.PORT to build URLs
    - Resolution: Updated swaggerMiddleware to derive URLs from PORT

========================================================================================================

- Containerization
  - Dockerfile uses Yarn-only flag (--frozen-lockfile) with npm — DONE
    - Impact: Build failures
    - Action: Use `npm ci` (build) and `npm ci --omit=dev` (runtime)
    - Resolution: Replaced with `npm ci` in builder and `npm ci --omit=dev` in runtime
  - Duplicate healthchecks (Dockerfile and compose)
    - Impact: Redundant probes
    - Action: Keep compose healthcheck; remove one
  - Logs volume mounted but unused
    - Impact: Wasted volume; expectations mismatch
    - Action: Implement file logging to /app/logs or remove volume

========================================================================================================

- Environment & Config — DONE
  - Missing required envs in compose/.env
    - Impact: Startup/runtime failures
    - Action: Add MONGODB_URI, SMTP vars, REDIS_URL; commit .env.example
    - Resolution: Added required env vars to docker-compose.yml (via ${...}); ensure .env contains values

========================================================================================================

- Security
  - Email test route lacks auth but Swagger shows bearer — DONE
    - Impact: Security inconsistency
    - Action: Add auth middleware or mark route Swagger with security: []
    - Resolution: Updated /test-email Swagger to `security: []` to reflect public access
  - CORS wide-open — DONE
    - Impact: Risky in production
    - Action: Restrict origins by env
    - Resolution: Configured CORS in index.js to allow only origins from CORS_ALLOWED_ORIGINS (env), with dev defaults
  - No rate limiting / security headers — DONE
    - Impact: DoS and weak headers
    - Action: Add express-rate-limit and helmet
    - Resolution: Added helmet and express-rate-limit in index.js (configurable via RATE_LIMIT_* envs)
  - SMTP TLS rejectUnauthorized=false — DONE
    - Impact: Weak TLS validation
    - Action: Make env-driven; default true in prod
    - Resolution: Made tls.rejectUnauthorized configurable via SMTP_REJECT_UNAUTHORIZED; defaults to true in production

========================================================================================================

- API & Errors — DONE
  - No global error/404 handlers
    - Impact: Inconsistent error responses
    - Action: Add centralized error and not-found handlers
    - Resolution: Added 404 and centralized error middleware in index.js with consistent JSON shape
  - Health endpoint leaks DB details — DONE
    - Impact: Possible info leak
    - Action: Reduce detail in prod or protect
    - Resolution: /db-status now returns only state in production; full details in non-prod

========================================================================================================

- GraphQL — DONE
  - Introspection always on; no complexity/depth limits
    - Impact: Info leak / DoS risk
    - Action: Disable in prod; add depth/complexity limits
    - Resolution: Introspection disabled in production; depth limit via graphql-depth-limit (GRAPHQL_MAX_DEPTH)

========================================================================================================

- Redis — DONE
  - No readiness check/retry on startup
    - Impact: Fragile startup
    - Action: Add retry/backoff and ping before use
    - Resolution: Added connect retries with exponential backoff and ping readiness in helper; configurable via REDIS_MAX_RETRIES and REDIS_RETRY_DELAY_MS

========================================================================================================

- Docs — DONE
  - Swagger servers hardcoded (prod URL)
    - Impact: Env drift/confusion
    - Action: Drive servers list from env; avoid non-existent domains
    - Resolution: Servers list now derived from SWAGGER_SERVER_LOCAL and SWAGGER_SERVER_PROD envs (with localhost default)

========================================================================================================

[2025-10-05] New Issues Identified

- Global CORS allows all origins
  - Impact: Security risk in production
  - Action: In production, replace global allow-all with env-driven allowlist (keep permissive route-specific CORS only where needed)

- Helmet contentSecurityPolicy disabled globally
  - Impact: Reduced protection in production
  - Action: Enable Helmet CSP in production; only disable (or relax) in development for Apollo UI

- /graphql entirely exempt from rate limiting
  - Impact: Potential abuse vector in production
  - Action: Re-enable rate limit for POST /graphql (keep GET exempt for landing page)

- Swagger CORS set to wildcard
  - Impact: Unrestricted access to docs
  - Action: Limit Swagger CORS origins by env in production

- Logging format set to morgan 'dev' universally
  - Impact: Less useful logs in production
  - Action: Use 'combined' in production or switch to pino with JSON logs
